- job:
    name: Setup-Nodepool
    project-type: pipeline
    concurrent: false
    properties:
      - build-discarder:
          num-to-keep: 30
    parameters:
      - rpc_gating_params
    triggers:
      - timed: "@daily"
    dsl: |
      library "rpc-gating@${RPC_GATING_BRANCH}"
      common.globalWraps(){
        try{
          common.withRequestedCredentials("id_rsa_cloud10_jenkins_file"){
            stage("Prepare Ansible Roles"){
              // Getting the roles is a bit flaky sometimes, so we
              // implement a retry to improve the chances of success.
              retry(3){
                common.venvGalaxy(
                  "install",
                  "-r ${env.WORKSPACE}/rpc-gating/role_requirements.yml",
                  "-p ${env.WORKSPACE}/roles"
                )
                common.venvGalaxy(
                  "install",
                  "-r ${env.WORKSPACE}/rpc-gating/nodepool/role_requirements.yml",
                  "-p ${env.WORKSPACE}/roles"
                )
              }
            } // stage

            stage("Prepare Environment"){

              // write the clouds.yaml file
              env.OS_CLIENT_CONFIG_FILE = common.writeCloudsCfg()

              // Tell ansible where to find roles
              env.ANSIBLE_ROLES_PATH = "${env.WORKSPACE}/roles"

              // Tell ansible where the dynamic inventory is
              env.ANSIBLE_INVENTORY = "${env.WORKSPACE}/rpc-gating/scripts/ansible_v2_3_2_0_1_contrib_inventory_openstack.py"

              // Tell ansible where the ssh private key is
              env.ANSIBLE_PRIVATE_KEY_FILE = "${env.JENKINS_SSH_PRIVKEY}"

            } // stage

            stage("Prepare Instances"){
              dir('rpc-gating/playbooks'){

                // Run the setup playbook
                common.venvPlaybook(
                  playbooks: [
                    "setup_openstack_instances.yml"
                  ],
                  args: [
                    "-v",
                    "-e '@${env.WORKSPACE}/rpc-gating/nodepool/instance_list.yml'"
                  ]
                ) //venvPlaybook

                // We need an inventory refresh, so we execute
                // this using a fresh shell instead of including
                // the playbooks in the previous ansible-playbook
                // play list.

                // Run the instance prep plays
                withCredentials([
                  usernamePassword(
                    credentialsId: "phobos_vpn_ipsec",
                    usernameVariable: "ipsec_id",
                    passwordVariable: "ipsec_secret"
                  ),
                  usernamePassword(
                    credentialsId: "phobos_vpn_xauth",
                    usernameVariable: "xauth_user",
                    passwordVariable: "xauth_pass"
                  ),
                  string(
                    credentialsId: 'phobos_vpn_gateway',
                    variable: 'gw_from_creds'
                  ),
                ]){
                  common.venvPlaybook(
                    playbooks: [
                      "drop_ssh_auth_keys.yml",
                      "slave_security.yml",
                      "phobos_vpn.yml"
                    ],
                    args: [
                      "-v",
                      "-e target_hosts=nodepool_server"
                    ],
                    vars: [
                      ipsec_id: env.ipsec_id,
                      ipsec_secret: env.ipsec_secret,
                      xauth_user: env.xauth_user,
                      xauth_pass: env.xauth_pass,
                      gateway: env.gw_from_creds
                    ]
                  ) //venvPlaybook
                } // withCredentials
              } //dir
            } // stage

            stage("Setup Nodepool"){
              dir('rpc-gating/nodepool'){

                // Run the setup playbook
                common.venvPlaybook(
                  playbooks: [
                    "setup_nodepool.yml"
                  ],
                  args: [
                    "-v"
                  ]
                ) //venvPlaybook

              } //dir
            } // stage
          } //withCredentials
        } catch (e) {
          print(e)
          throw(e)
        } finally {
          common.archive_artifacts()
        }
      } // globalWraps
